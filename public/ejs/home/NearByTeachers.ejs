<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta
      name="viewport"
      content="width=device-width, initial-scale=1.0, shrink-to-fit=no"
    />
    <title>Nearby Tutor</title>
    <!-- Google Fonts -->
    <!-- MDB -->
    <link
      rel="stylesheet"
      href="https://js.api.here.com/v3/3.1/mapsjs-ui.css"
    />
    <link rel="stylesheet" href="https://unpkg.com/leaflet/dist/leaflet.css" />
    <link
      href="https://fonts.googleapis.com/css?family=Poppins:300,400,500,700&display=swap"
      rel="stylesheet"
    />
    <!-- MDB -->
    <link
      href="https://cdnjs.cloudflare.com/ajax/libs/mdb-ui-kit/8.1.0/mdb.min.css"
      rel="stylesheet"
    />
    <script
      type="text/javascript"
      src="https://cdnjs.cloudflare.com/ajax/libs/mdb-ui-kit/6.2.0/mdb.min.js"
    ></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/mdb-ui-kit/8.1.0/mdb.umd.min.js"></script>
    <!-- Font Awesome -->
    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css"
    />
    <style>
      #map {
        height: 600px;
        width: 100%;
      }

      .suggestion {
        cursor: pointer;
        padding: 1%;
        border-bottom: 1px solid #ddd;
      }

      .suggestion:hover {
        background-color: #f1f1f1;
      }

      .navbar-toggler {
        position: absolute;
        right: 15px;
        top: 15px;
      }

      .navbar-toggler-icon {
        background-color: #ffffff;
        width: 30px;
        height: 30px;
      }
    </style>
  </head>

  <body>
    <!-- Start: Navbar Centered Links -->
    <%- include('../NavBar/NavBar') %>
    <!-- End: Navbar Centered Links -->

    <section class="py-5">
      <div class="row">
        <div class="col-7">
          <div class="container py-5">
            <div class="container mt-5">
              <div class="row">
                <div class="col-md-6 offset-md-3">
                  <div class="md-form">
                    <input
                      type="text"
                      id="locationInput"
                      class="form-control"
                      placeholder="Enter a location"
                    />
                    <label for="locationInput">Search Location</label>
                  </div>
                  <div id="suggestions" class="list-group"></div>
                </div>
              </div>
              <div class="row mt-4">
                <div class="col-12">
                  <div id="map" class="z-depth-1 rounded"></div>
                </div>
              </div>
            </div>

            <div
              class="modal fade"
              id="teacherModal"
              tabindex="-1"
              aria-labelledby="teacherModalLabel"
              aria-hidden="true"
            >
              <div class="modal-dialog">
                <div class="modal-content">
                  <div class="modal-header">
                    <h5 class="modal-title" id="teacherModalLabel"></h5>
                    <button
                      type="button"
                      class="btn-close"
                      data-mdb-dismiss="modal"
                      aria-label="Close"
                    ></button>
                  </div>
                  <div class="modal-body">
                    <p>
                      <strong>Subject:</strong>
                      <span id="teacherSubject"></span>
                    </p>
                    <p>
                      <strong>Experience:</strong>
                      <span id="teacherExperience"></span>
                    </p>
                    <p>
                      <strong>Rating:</strong> <span id="teacherRating"></span>
                    </p>
                    <p>
                      <strong>Distance:</strong>
                      <span id="totalDistance"></span>
                    </p>
                  </div>
                  <div class="modal-footer">
                    <a id="detailsLink" class="btn btn-primary" href="#"
                      >View Details</a
                    >
                    <button
                      type="button"
                      class="btn btn-secondary"
                      id="routeButton"
                    >
                      Show Routes
                    </button>
                    <button
                      type="button"
                      class="btn btn-secondary"
                      data-mdb-dismiss="modal"
                    >
                      Close
                    </button>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
        <div class="col-5">
          <div class="container mt-3">
            <img
              src="<%- localhost %>/images/location-review-animate.svg"
              alt=""
            />
          </div>
        </div>
      </div>
      <!-- Start: Pricing Duo -->
    </section>
    <!-- Start: Footer Multi Column -->
    <!-- End: Footer Multi Column -->
    <script src="https://js.api.here.com/v3/3.1/mapsjs-core.js"></script>
    <script src="https://js.api.here.com/v3/3.1/mapsjs-service.js"></script>
    <script src="https://js.api.here.com/v3/3.1/mapsjs-ui.js"></script>
    <script src="https://unpkg.com/leaflet/dist/leaflet.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
    <!-- Code injected by live-server -->

    <span id="PING_IFRAME_FORM_DETECTION" style="display: none"></span>

    <script>
      var map = L.map('map').setView([0, 0], 2); // Initialize map with a default view
      var marker; // Declare marker variable
      var currentLocationMarker; // Marker for current location
      var currentLocation; // Coordinates of current location
      var routeLayer; // Layer to display route
      let address = [];
      let selectedShopCoordinates; // Store selected shop coordinates

      // Custom icons
      var shopIcon = L.icon({
        iconUrl: 'https://cdn-icons-png.flaticon.com/512/3135/3135715.png',
        iconSize: [32, 32],
      });

      var currentLocationIcon = L.icon({
        iconUrl: 'https://cdn-icons-png.flaticon.com/512/684/684908.png', // Current location icon URL
        iconSize: [32, 32],
      });

      var searchLocationIcon = L.icon({
        iconUrl: 'https://cdn-icons-png.flaticon.com/512/854/854878.png', // Search location icon URL
        iconSize: [32, 32],
      });

      // Add a tile layer
      L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
        attribution:
          '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors',
      }).addTo(map);

      // Get current location of the user
      if (navigator.geolocation) {
        navigator.geolocation.getCurrentPosition(
          function (position) {
            currentLocation = [
              position.coords.latitude,
              position.coords.longitude,
            ];
            currentLocationMarker = L.marker(currentLocation, {
              icon: currentLocationIcon,
            })
              .addTo(map)
              .bindPopup('You are here')
              .openPopup();
            map.setView(currentLocation, 12);
          },
          function (error) {
            console.error('Error getting location: ', error);
          }
        );
      } else {
        alert('Geolocation is not supported by this browser.');
      }

      // Function to handle input change event
      function handleInput() {
        var input = document.getElementById('locationInput').value;
        if (input.trim() === '') {
          clearSuggestions();
          return;
        }
        fetchSuggestions(input);
      }
      document.addEventListener('DOMContentLoaded', () => {
        fetch('/NearbyTutor')
          .then((response) => response.json())
          .then((data) => {
            console.log(data);

            const address = data.map((item) => ({
              name: item.name,
              area: item.area,
              subject: item.subject,
              rating: item.rating,
              experience: item.experience,
              imageUrl: 'https://via.placeholder.com/150',
              T_ID: item.T_ID,
            })); // Convert to the desired format
            addAddressMarkers(address); // Call the function to add markers after data is fetched
          })
          .catch((error) => console.error('Error fetching data:', error));
      });

      // Function to fetch suggestions from Geoapify API
      function fetchSuggestions(input) {
        var apiKey = '7fa23b5a9b194102a9be9a11ce64a57c'; // Replace with your Geoapify API key
        var url =
          'https://api.geoapify.com/v1/geocode/autocomplete?text=' +
          encodeURIComponent(input) +
          '&apiKey=' +
          apiKey;

        axios
          .get(url)
          .then(function (response) {
            displaySuggestions(response.data.features);
          })
          .catch(function (error) {
            console.error('Error fetching suggestions:', error);
          });
      }

      // Function to display suggestions
      function displaySuggestions(suggestions) {
        var suggestionsContainer = document.getElementById('suggestions');
        suggestionsContainer.innerHTML = '';

        suggestions.forEach(function (suggestion) {
          var suggestionText = suggestion.properties.formatted;
          var suggestionItem = document.createElement('div');
          suggestionItem.textContent = suggestionText;
          suggestionItem.classList.add(
            'suggestion',
            'list-group-item',
            'list-group-item-action'
          );
          suggestionItem.addEventListener('click', function () {
            document.getElementById('locationInput').value = suggestionText;
            clearSuggestions();
            var coordinates = suggestion.geometry.coordinates;
            centerMapAndAddMarker(coordinates, suggestionText);
          });
          suggestionsContainer.appendChild(suggestionItem);
        });
      }

      // Function to clear suggestions
      function clearSuggestions() {
        document.getElementById('suggestions').innerHTML = '';
      }

      // Function to center the map and add a marker on a specific location
      function centerMapAndAddMarker(coordinates, label) {
        var latLng = [coordinates[1], coordinates[0]]; // Leaflet expects [lat, lng]
        map.setView(latLng, 12);

        if (marker) {
          marker.setLatLng(latLng).bindPopup(label).openPopup();
        } else {
          marker = L.marker(latLng, { icon: searchLocationIcon })
            .addTo(map)
            .bindPopup(label)
            .openPopup();
        }
      }

      // Function to fetch and display directions
      function fetchAndDisplayDirections(start, end) {
        var apiKey = '7fa23b5a9b194102a9be9a11ce64a57c'; // Replace with your Geoapify API key
        var url =
          'https://api.geoapify.com/v1/routing?waypoints=' +
          start[0] +
          ',' +
          start[1] +
          '|' +
          end[1] +
          ',' +
          end[0] +
          '&mode=drive&lang=en&details=instruction_details&apiKey=' +
          apiKey;

        axios
          .get(url)
          .then(function (response) {
            // Extracting route information from the response
            var routeData = response.data.features[0];
            var routeCoordinates = routeData.geometry.coordinates[0]; // Assuming the first set of coordinates

            // Draw route polyline on the map
            if (routeLayer) {
              map.removeLayer(routeLayer);
            }

            routeLayer = L.polyline(
              routeCoordinates.map(function (coord) {
                return [coord[1], coord[0]]; // GeoJSON coordinates are [lng, lat], Leaflet expects [lat, lng]
              }),
              { color: 'blue' }
            ).addTo(map);
            map.fitBounds(routeLayer.getBounds());

            // Display route instructions and mark waypoints
            displayRouteInstructions(routeData.properties.legs[0].steps);

            // Display distance
            var distance = routeData.properties.distance; // Distance in meters
            var distanceKm = (distance / 1000).toFixed(2); // Convert to kilometers and format to 2 decimal places
            document.getElementById('totalDistance').innerText =
              distanceKm + ' km';
          })
          .catch(function (error) {
            console.error('Error fetching directions:', error);
          });
      }

      // Function to display route instructions and mark waypoints
      function displayRouteInstructions(instructions) {
        instructions.forEach(function (instruction) {
          var instructionText = instruction.instruction.text;
          console.log(instructionText); // Output the instruction text to console

          // Reverse geocode the coordinates to get the address
          if (instruction.instruction && instruction.instruction.location) {
            var coordinates = instruction.instruction.location;
            reverseGeocode(coordinates, instructionText);
          }
        });
      }

      // Function to reverse geocode coordinates and mark waypoints on the map
      function reverseGeocode(coordinates, instructionText) {
        var apiKey = '7fa23b5a9b194102a9be9a11ce64a57c'; // Replace with your Geoapify API key
        var url =
          'https://api.geoapify.com/v1/geocode/reverse?lat=' +
          coordinates[1] +
          '&lon=' +
          coordinates[0] +
          '&apiKey=' +
          apiKey;

        axios
          .get(url)
          .then(function (response) {
            var address = response.data.features[0].properties.formatted;
            console.log('Address:', address); // Output the reverse geocoded address to console

            // Mark waypoint on the map
            var marker = L.marker([coordinates[1], coordinates[0]])
              .addTo(map)
              .bindPopup(instructionText + '<br>' + address)
              .openPopup();
          })
          .catch(function (error) {
            console.error('Error reverse geocoding coordinates:', error);
          });
      }

      // Function to add address markers to the map and set up click event listeners
      function addAddressMarkers(addresses) {
        var apiKey = '7fa23b5a9b194102a9be9a11ce64a57c'; // Replace with your Geoapify API key

        addresses.forEach(function (location) {
          var query = location.area;
          var url = `https://api.geoapify.com/v1/geocode/search?text=${encodeURIComponent(
            query
          )}&apiKey=${apiKey}`;

          axios
            .get(url)
            .then(function (response) {
              if (response.data.features.length > 0) {
                var coordinates =
                  response.data.features[0].geometry.coordinates;
                var latLng = [coordinates[1], coordinates[0]]; // Leaflet expects [lat, lng]

                var addressMarker = L.marker(latLng, { icon: shopIcon })
                  .addTo(map)
                  .bindPopup(location.area);

                addressMarker.on('click', function () {
                  selectedShopCoordinates = coordinates;

                  // Populate modal with shop details
                  document.getElementById('teacherModalLabel').innerText =
                    location.name;
                  document.getElementById('teacherSubject').innerText =
                    location.subject;
                  document.getElementById('teacherExperience').innerText =
                    location.experience;
                  document.getElementById('teacherRating').innerText =
                    location.rating;
                  document.getElementById('totalDistance').innerText =
                    'Calculating...';

                  // Show the modal
                  var modal = new mdb.Modal(
                    document.getElementById('teacherModal')
                  );
                  modal.show();

                  // Calculate distance without displaying route
                  if (currentLocation) {
                    calculateDistance(currentLocation, coordinates);
                  }
                });
              }
            })
            .catch(function (error) {
              console.error('Error geocoding address:', error);
            });
        });
      }

      // Function to calculate distance between two points
      function calculateDistance(start, end) {
        var apiKey = '7fa23b5a9b194102a9be9a11ce64a57c'; // Replace with your Geoapify API key
        var url =
          'https://api.geoapify.com/v1/routing?waypoints=' +
          start[0] +
          ',' +
          start[1] +
          '|' +
          end[1] +
          ',' +
          end[0] +
          '&mode=drive&lang=en&apiKey=' +
          apiKey;

        axios
          .get(url)
          .then(function (response) {
            var routeData = response.data.features[0];
            var distance = routeData.properties.distance; // Distance in meters
            var distanceKm = (distance / 1000).toFixed(2); // Convert to kilometers and format to 2 decimal places
            document.getElementById('totalDistance').innerText =
              distanceKm + ' km';
          })
          .catch(function (error) {
            console.error('Error calculating distance:', error);
          });
      }

      // Add event listener to input field
      document
        .getElementById('locationInput')
        .addEventListener('input', handleInput);

      // Event listener for the route button inside the modal
      document
        .getElementById('routeButton')
        .addEventListener('click', function () {
          if (currentLocation && selectedShopCoordinates) {
            fetchAndDisplayDirections(currentLocation, selectedShopCoordinates);
          } else {
            alert('Current location or shop coordinates not available.');
          }
        });
    </script>
  </body>
</html>
