<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Tutor Schedule Manager</title>
    <link
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css"
      rel="stylesheet"
    />
    <style>
      :root {
        --primary-color: #3b82f6;
        --background-color: #f8fafc;
      }

      body {
        font-family: 'Inter', sans-serif;
        background-color: var(--background-color);
      }

      .schedule-grid {
        display: grid;
        grid-template-columns: 100px repeat(7, 1fr);
        gap: 2px;
        margin-top: 2rem;
      }

      .time-slot {
        padding: 1rem;
        background: #fff;
        border: 2px solid #e2e8f0;
        cursor: pointer;
        transition: all 0.2s ease;
      }

      .time-slot.selected {
        background: var(--primary-color);
        color: white;
        border-color: #1d4ed8;
      }

      .grid-header {
        background: #f1f5f9;
        padding: 1rem;
        text-align: center;
        font-weight: 600;
      }
    </style>
  </head>
  <body>
    <div class="container py-5">
      <div class="card shadow">
        <div class="card-header bg-primary text-white">
          <h3 class="mb-0">Manage Availability</h3>
          <p class="mb-0">Click or drag to mark unavailable time slots</p>
        </div>

        <div class="card-body">
          <div id="schedule-grid" class="schedule-grid"></div>

          <div class="mt-4 d-flex justify-content-between align-items-center">
            <div class="legend">
              <span class="badge bg-primary">Unavailable</span>
              <span class="badge bg-light text-dark">Available</span>
            </div>
            <button id="saveBtn" class="btn btn-success">Save Changes</button>
          </div>
        </div>
      </div>
    </div>

    <script>
      class ScheduleManager {
        constructor() {
          this.grid = document.getElementById('schedule-grid');
          this.selectedSlots = new Set();
          this.isDragging = false;

          this.initializeGrid();
          this.setupEventListeners();
        }

        days = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'];
        hours = Array.from({ length: 13 }, (_, i) => i + 8);

        initializeGrid() {
          // Create header row
          this.grid.innerHTML = '';
          this.grid.appendChild(this.createHeader(''));
          this.days.forEach((day) =>
            this.grid.appendChild(this.createHeader(day))
          );

          // Create time slots
          this.hours.forEach((hour) => {
            this.grid.appendChild(this.createTimeHeader(hour));
            this.days.forEach((_, dayIndex) => {
              const slot = this.createTimeSlot(dayIndex, hour);
              this.grid.appendChild(slot);
            });
          });
        }

        createHeader(text) {
          const header = document.createElement('div');
          header.className = 'grid-header';
          header.textContent = text;
          return header;
        }

        createTimeHeader(hour) {
          const time = hour > 12 ? `${hour - 12}:00 PM` : `${hour}:00 AM`;
          return this.createHeader(time);
        }

        createTimeSlot(dayIndex, hour) {
          const slot = document.createElement('div');
          slot.className = 'time-slot';
          slot.dataset.day = dayIndex;
          slot.dataset.hour = hour;
          return slot;
        }

        setupEventListeners() {
          this.grid.addEventListener('mousedown', (e) => this.handleStart(e));
          this.grid.addEventListener('mouseover', (e) => this.handleDrag(e));
          document.addEventListener('mouseup', () => this.handleEnd());
          document
            .getElementById('saveBtn')
            .addEventListener('click', () => this.saveSchedule());
        }

        handleStart(e) {
          if (!e.target.classList.contains('time-slot')) return;
          this.isDragging = true;
          this.toggleSlot(e.target);
        }

        handleDrag(e) {
          if (!this.isDragging || !e.target.classList.contains('time-slot'))
            return;
          this.toggleSlot(e.target);
        }

        handleEnd() {
          this.isDragging = false;
        }

        toggleSlot(slot) {
          slot.classList.toggle('selected');
          const key = `${slot.dataset.day}-${slot.dataset.hour}`;

          if (this.selectedSlots.has(key)) {
            this.selectedSlots.delete(key);
          } else {
            this.selectedSlots.add(key);
          }
        }

        async saveSchedule() {
          try {
            const response = await fetch(
              'http://localhost:3000/teacher/schedule',

              {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ unavailableSlots: slots }),
              }
            );

            const data = await response.json();

            if (!response.ok) {
              console.error('Server Error:', data.error);
              alert(`Error: ${data.error || 'Unknown error'}`);
              return;
            }

            alert('Schedule saved successfully!');
            console.log('Server Response:', data);
          } catch (error) {
            console.error('Network Error:', error);
            alert('Failed to connect to server. Check console.');
          }
        }
      }
      // Initialize when DOM is loaded
      document.addEventListener(
        'DOMContentLoaded',
        () => new ScheduleManager()
      );
    </script>
  </body>
</html>
